// js/app-initialization.js

// Define global state variables *before* DOMContentLoaded
// Use `window.` to ensure they are truly global if accessed across files without modules
window.pageCounter = 1; // May not be used for marking, but keep for compatibility
window.pages = [];
window.currentSurah = ''; // Stores selected Surah number as string
window.audioFileName = '';
window.editingPageIndex = -1; // Consider if this global is still needed or managed by time-editing.js
window.reciterName = '';
window.selectedQiraat = '';
window.selectedRawi = '';

// --- Main Initialization Logic ---
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM Loaded. Initializing application...");

    // 1. Load any saved state FIRST
    let dataLoaded = false;
    if (typeof loadFromLocalStorage === 'function') {
        dataLoaded = loadFromLocalStorage();
        if(dataLoaded) {
             console.log("State loaded from localStorage.");
        } else {
             console.log("No valid state found in localStorage or loading failed.");
             // Ensure defaults are set if loading fails
             window.pages = []; window.currentSurah = ''; /* reset others */
        }
    } else {
        console.error("loadFromLocalStorage function not found. State not loaded.");
    }

    // 2. Setup UI components (dropdowns, input fields, etc.)
    // These functions should now correctly populate based on the globally set variables loaded above
    if (typeof setupSurahDropdown === 'function') setupSurahDropdown(); else console.error("setupSurahDropdown not found.");
    if (typeof addReciterInput === 'function') addReciterInput(); else console.error("addReciterInput not found.");
    if (typeof setupQiraatDropdown === 'function') setupQiraatDropdown(); else console.error("setupQiraatDropdown not found.");
    if (typeof setupAudioTimeDisplay === 'function') setupAudioTimeDisplay(); else console.error("setupAudioTimeDisplay not found.");
    if (typeof addResetButton === 'function') addResetButton(); else console.error("addResetButton not found.");

    // 3. Restore UI values AFTER dropdowns are populated
     const surahSelect = document.getElementById('surahSelect');
     if (surahSelect && window.currentSurah) surahSelect.value = window.currentSurah;

     const reciterInput = document.getElementById('reciterInput');
     if (reciterInput && window.reciterName) reciterInput.value = window.reciterName;

     const qiraatSelect = document.getElementById('qiraatSelect');
     if (qiraatSelect) {
         const qiraatValueToSet = (window.selectedQiraat && window.selectedRawi)
                                ? `${window.selectedQiraat} - ${window.selectedRawi}`
                                : window.selectedQiraat || '';
         qiraatSelect.value = qiraatValueToSet;
     }

     const fileNameDisplay = document.getElementById('fileName');
     if (fileNameDisplay && window.audioFileName) fileNameDisplay.textContent = window.audioFileName;


    // 4. Handle Audio File Input
    const audioFileInput = document.getElementById('audioFile');
    if (audioFileInput) {
        audioFileInput.addEventListener('change', function(e) {
            if (e.target.files[0]) {
                window.audioFileName = e.target.files[0].name;
                if (fileNameDisplay) fileNameDisplay.textContent = window.audioFileName;

                const audio = document.getElementById('audio');
                if (audio) {
                    const fileURL = URL.createObjectURL(e.target.files[0]);
                    audio.src = fileURL;
                    audio.load(); // Explicitly load the new source
                }

                // Reset pages when new audio is loaded? Depends on desired workflow.
                 // window.pages = [];
                 // if (typeof rebuildPageList === 'function') rebuildPageList();
                 // if (typeof window.renderTimeline === 'function' && audio) window.renderTimeline(audio, window.pages);


                if (typeof saveToLocalStorage === 'function') saveToLocalStorage();
            }
        });
    } else {
        console.error("Audio file input element not found.");
    }

    // 5. Initial UI updates based on potentially loaded data
    if (typeof rebuildPageList === 'function') {
        rebuildPageList(); // Display loaded pages in the list
    } else {
        console.error("rebuildPageList function not found.");
    }

    // 6. Trigger dynamic buttons AFTER dropdowns populated AND value potentially set
    if (surahSelect && window.currentSurah && window.currentSurah !== "") {
         console.log(`Triggering 'change' for Surah ${window.currentSurah} to generate buttons.`);
         surahSelect.dispatchEvent(new Event('change')); // This calls generateButtons in dynamic-page-buttons.js
    }


    // 7. Render timeline if audio source potentially set and pages exist
    const audio = document.getElementById('audio');
     if (audio && typeof window.renderTimeline === 'function') {
          const tryRenderTimeline = () => {
               if(audio.readyState >= 1) { // HAVE_METADATA
                   window.renderTimeline(audio, window.pages);
               } else if (audio.src && !audio.error) { // Check src and no error state
                   audio.addEventListener('loadedmetadata', () => window.renderTimeline(audio, window.pages), { once: true });
                   audio.addEventListener('error', (e) => console.error("Audio error on load for timeline:", e), { once: true });
               } else {
                   console.log("Timeline not rendered initially: No src or audio not ready.");
               }
           };
           // Use setTimeout to ensure DOM updates from dropdowns etc. are processed
           setTimeout(tryRenderTimeline, 50);
       } else {
           console.error("renderTimeline function or audio element not found.");
       }

       console.log("Application initialization complete.");
});

// Ensure helper formatTimeWithMs is defined globally or loaded before needed
// (It's defined in audio-handling.js, ensure loading order is correct in HTML)