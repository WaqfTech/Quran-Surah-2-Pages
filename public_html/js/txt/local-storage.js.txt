// js/local-storage.js - Check variable scope and structure handling

// Function to save current state to localStorage
function saveToLocalStorage() {
    // Ensure global variables exist and are being saved
    const data = {
        currentSurah: window.currentSurah || '', // Surah number string
        pageCounter: window.pageCounter || 1, // Still useful? Keep for now.
        pages: window.pages || [], // Saves the array with {startTime, endTime, ...}
        audioFileName: window.audioFileName || '',
        reciterName: window.reciterName || '',
        // Save the combined Qiraat-Rawi string for easier dropdown restoration
        selectedQiraat: (window.selectedQiraat && window.selectedRawi)
                       ? `${window.selectedQiraat} - ${window.selectedRawi}`
                       : window.selectedQiraat || '',
    };
    try {
         localStorage.setItem('quranPageMarker', JSON.stringify(data));
         // console.log("Saved to localStorage:", data);
    } catch (e) {
         console.error("Error saving to localStorage:", e);
         // Handle potential storage quota errors
         alert("حدث خطأ أثناء حفظ البيانات. قد تكون مساحة التخزين ممتلئة.");
    }
}

// Function to load data from localStorage
function loadFromLocalStorage() {
    const storedData = localStorage.getItem('quranPageMarker');
    if (storedData) {
        try {
            const data = JSON.parse(storedData);
            console.log("Loaded from localStorage:", data);

            // Restore global state variables
            window.pageCounter = data.pageCounter || 1;
            // Basic validation/migration for pages structure
            window.pages = (data.pages || []).map(p => ({
                page: parseInt(p.page) || 0,
                surahNumber: parseInt(p.surahNumber) || 0,
                startTime: parseFloat(p.startTime) || 0,
                endTime: parseFloat(p.endTime) || (parseFloat(p.time) || 0), // Fallback for old structure
                startTimeFormatted: p.startTimeFormatted || (typeof formatTimeWithMs === 'function' ? formatTimeWithMs(p.startTime || 0) : '00:00.000'),
                endTimeFormatted: p.endTimeFormatted || (typeof formatTimeWithMs === 'function' ? formatTimeWithMs(p.endTime || (p.time || 0)) : '00:00.000') // Fallback for old structure
            })).filter(p => p.page > 0 && p.surahNumber > 0); // Filter invalid entries

            window.currentSurah = data.currentSurah || ''; // Surah number string
            window.audioFileName = data.audioFileName || '';
            window.reciterName = data.reciterName || ''; // Load directly from main data
            const loadedQiraatRawi = data.selectedQiraat || '';

             // Set global qiraat/rawi variables from combined string
             if (loadedQiraatRawi.includes(' - ')) {
                 [window.selectedQiraat, window.selectedRawi] = loadedQiraatRawi.split(' - ');
             } else {
                 window.selectedQiraat = loadedQiraatRawi;
                 window.selectedRawi = '';
             }

            // --- Update UI Elements (Done in app-initialization.js after this runs) ---

            // Save the potentially migrated/validated data back? Optional.
            // saveToLocalStorage();

            // Return true to indicate data was loaded
            return true;

        } catch (e) {
            console.error("Error parsing data from localStorage:", e);
            localStorage.removeItem('quranPageMarker'); // Clear corrupted data
            // Reset to default state
             window.pages = []; window.currentSurah = ''; /* etc. */
             return false;
        }
    }
    // Return false if no data was found
    return false;
}